<resources>
    <string name="app_name">Android Collapsing Toolbar Example</string>
    <string name="collapsing_toolbar_example_1">Collapsing Toolbar Example 1</string>
    <string name="lorem">I have presented the CoordinatorLayout in Material Design style to make some special effects with Toolbar/Action Barlike auto hide Toolbar when scroll, expanding/collapsing it, style with a header image have presented the CoordinatorLayout in Material Design style to make some special effects with Toolbar/Action Barlike auto hide Toolbar when scroll, expanding/collapsing it, style with a header image have presented the CoordinatorLayout in Material Design style to make some special effects with Toolbar/Action Barlike auto hide Toolbar when scroll, expanding/collapsing it, style with a header image have presented the CoordinatorLayout in Material Design style to make some special effects with Toolbar/Action Barlike auto hide Toolbar when scroll, expanding/collapsing it, style with a header image have presented the CoordinatorLayout in Material Design style to make some special effects with Toolbar/Action Barlike auto hide Toolbar when scroll, expanding/collapsing it, style with a header image
    </string>
    <string name="text">The CoordinatorLayout is a new layout, introduced with the Android Design Support Library. The CoordinatorLayout is a super-powered FrameLayout (according to the official documentation). If you have used a FrameLayout before, you should be very comfortable using CoordinatorLayout. If you havenâ€™t used a FrameLayout, do not worry, it is pretty straightforward.
        By default, if you add multiple children to a FrameLayout, they would overlap each other. A FrameLayout should be used most often to hold a single child view. The main appeal of the CoordinatorLayout is its ability to coordinate the animations and transitions of the views within it. Using xml only, you can describe a layout where a FAB moves out of the way of an incoming Snackbar, for example, or have a FAB (or any other View really) that is apparently attached to another widget, and moves on screen with the widget.
        For this article, we are going to show three different out of the box ways that using CoordinatorLayout can simplify your code, by making views respond to changes in the layout or position of other views. Then, we will discuss how this behavior is achieved in code, and show a fourth method, where you learn how to implement your own custom behaviors between views. By implementing custom behaviors, you can easily create amazing interdependent animations, transitions and effects, limited only by your imagination (and coding ability :D).</string>
</resources>
